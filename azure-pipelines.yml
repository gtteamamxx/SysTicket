# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    projects: 'Tests/\*\*/\*.csproj'
    nobuild: true

- task: reportgenerator@5
  inputs:
    reports: '$(Build.SourcesDirectory)/Tests/\*\*/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'HtmlInline;Cobertura;Badges'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
    checkLatest: true
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'
  workingDirectory: '$(Build.SourcesDirectory)/UI/SysTicket.Client'

- script: |
    npm run build
  displayName: 'npm run build'
  workingDirectory: '$(Build.SourcesDirectory)/UI/SysTicket.Client'

- task: CopyFiles@2
  inputs:
    Contents: '$(Build.SourcesDirectory)/UI/SysTicket.Client/dist/**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
- script: |
    dotnet publish -c Release
  displayName: 'Publish api'
  workingDirectory: '$(Build.SourcesDirectory)/API'

- task: CopyFiles@2
  inputs:
    Contents: '$(Build.SourcesDirectory)/API/bin/Release/net6.0/publish**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs: 
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: 'www'